# -*- coding: utf-8 -*-
"""MINOR PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gmk_gZZLrCVZp8cf1u7T2ZFF6tZdQy5e

Analysis of Body Measurements from the NHANES Dataset

This Jupyter/IPython notebook performs an analysis of body measurement data
from the National Health and Nutrition Examination Survey (NHANES) dataset.
The analysis includes reading data, visualizing weight distributions, comparing
male and female weights, computing descriptive statistics, calculating Body Mass
Index (BMI) and waist-to-hip/height ratios, and exploring correlations between
standardized measurements.

# ## 1. Download Data

# This section downloads the two CSV files containing body measurements for adult
# males and females from the specified GitHub repository.
"""

import requests

male_url = "https://github.com/gagolews/teaching-data/raw/master/marek/nhanes_adult_male_bmx_2020.csv"
female_url = "https://github.com/gagolews/teaching-data/raw/master/marek/nhanes_adult_female_bmx_2020.csv"

try:
    male_response = requests.get(male_url)
    male_response.raise_for_status()  # Raise an exception for HTTP errors
    with open("nhanes_adult_male_bmx_2020.csv", "wb") as f:
        f.write(male_response.content)
    print("Downloaded nhanes_adult_male_bmx_2020.csv")

    female_response = requests.get(female_url)
    female_response.raise_for_status()
    with open("nhanes_adult_female_bmx_2020.csv", "wb") as f:
        f.write(female_response.content)
    print("Downloaded nhanes_adult_female_bmx_2020.csv")

except requests.exceptions.RequestException as e:
    print(f"Error downloading files: {e}")
    exit()

""" ## 2. Read Data into NumPy Matrices

# This section reads the downloaded CSV files into NumPy matrices named male and
# female. The data is assumed to have seven columns in the order specified.

"""

import numpy as np

male = np.genfromtxt("nhanes_adult_male_bmx_2020.csv", delimiter=",", skip_header=1, dtype=float, autostrip=True, encoding='utf-8')
female = np.genfromtxt("nhanes_adult_female_bmx_2020.csv", delimiter=",", skip_header=1, dtype=float, autostrip=True, encoding='utf-8')

print("Male data loaded with shape:", male.shape)
print("Female data loaded with shape:", female.shape)

"""# ## 3. Histograms of Male and Female Weights

# This section generates histograms of the weights for both male and female
# participants on a single plot with identical x-axis limits for comparison.
"""

import pandas as pd

male_df = pd.read_csv("nhanes_adult_male_bmx_2020.csv", delimiter=",", engine='python', on_bad_lines='skip')
female_df = pd.read_csv("nhanes_adult_female_bmx_2020.csv", delimiter=",", engine='python', on_bad_lines='skip')

print(male_df.head())

"""# ## 4. Box-and-Whisker Plot of Male and Female Weights

# This section creates a box-and-whisker plot to compare the distribution of
# weights between male and female participants.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load CSVs with error handling
male_df = pd.read_csv("nhanes_adult_male_bmx_2020.csv", delimiter=",", engine='python', on_bad_lines='skip')
female_df = pd.read_csv("nhanes_adult_female_bmx_2020.csv", delimiter=",", engine='python', on_bad_lines='skip')

# Clean up column names (strip extra spaces or quotes)
male_df.columns = male_df.columns.str.strip().str.replace('"', '')
female_df.columns = female_df.columns.str.strip().str.replace('"', '')

# Check column names if needed
print("Male columns:", male_df.columns)
print("Female columns:", female_df.columns)

# Extract weight column
# Make sure this column exists (adjust name if needed)
if "BMXWT" in male_df.columns and "BMXWT" in female_df.columns:
    male_weights = male_df["BMXWT"].dropna()
    female_weights = female_df["BMXWT"].dropna()

    # Plot boxplot
    plt.figure(figsize=(6, 6))
    plt.boxplot([female_weights, male_weights], labels=['Female', 'Male'])
    plt.title('Comparison of Male and Female Weights')
    plt.ylabel('Weight (kg)')
    plt.grid(True)
    plt.show()
else:
    print("Column 'BMXWT' not found in one of the files.")

 # The box-and-whisker plot provides a concise summary of the weight distributions
# for both genders. The box represents the interquartile range (IQR), with the
# median indicated by a horizontal line inside the box. The whiskers extend to
# show the variability outside the upper and lower quartiles, and individual
# points beyond the whiskers are potential outliers.
#
# From the plot, we can observe that the median weight for males is higher than
# that for females. The IQR for males also appears to be wider, suggesting greater
# variability in their weights. Both distributions seem to have some potential
# outliers on the higher end.

"""# ## 5. Numerical Aggregates of Male and Female Weights

# This section computes basic descriptive statistics (measures of location,
# dispersion, and shape) for the male and female weight distributions.

"""

import pandas as pd
import numpy as np
from scipy.stats import skew, kurtosis

# Load the female dataset
try:
    female_df = pd.read_csv("nhanes_adult_female_bmx_2020.csv", delimiter=",", engine="python", on_bad_lines="skip")

    # Clean column names
    female_df.columns = female_df.columns.str.strip().str.replace('"', '')

    # Print column names to verify 'BMXWT' exists
    print("Female dataset columns:", female_df.columns.tolist())

    # Check if the weight column exists
    if "BMXWT" in female_df.columns:
        female_weights = female_df["BMXWT"].dropna()

        # Compute stats
        female_weight_mean = np.mean(female_weights)
        female_weight_median = np.median(female_weights)
        female_weight_std = np.std(female_weights)
        female_weight_skewness = skew(female_weights)
        female_weight_kurtosis = kurtosis(female_weights)

        # Print results
        print(f"Mean: {female_weight_mean:.2f}")
        print(f"Median: {female_weight_median:.2f}")
        print(f"Standard Deviation: {female_weight_std:.2f}")
        print(f"Skewness: {female_weight_skewness:.2f}")
        print(f"Kurtosis: {female_weight_kurtosis:.2f}")
    else:
        print("Column 'BMXWT' not found in the dataset.")

except Exception as e:
    print("Error loading or processing the file:", e)

"""# The descriptive statistics confirm the observations from the histograms and
# box plots. The mean and median weight for males are notably higher than those
# for females, indicating a tendency towards heavier weights in the male sample.
# The standard deviation and IQR for male weights are also larger, suggesting
# greater dispersion or variability in their weights compared to females.
#
# The skewness values for both distributions are positive (though close to zero),
# indicating a slight right skew, meaning the tail on the right side of the
# distribution is longer than the left. The kurtosis values are both positive,
# suggesting that both distributions have heavier tails and are more peaked
# around the mean than a normal distribution (which has a kurtosis of 0).
"""

# ## 6. Add Body Mass Index (BMI) to the Female Matrix

# This section calculates the Body Mass Index (BMI) for each female participant
# and adds it as an eighth column to the `female` matrix. BMI is calculated as
# weight (kg) divided by the square of height (in meters).

female_weight_kg = female[:, 0]
female_height_cm = female[:, 1]
female_height_m = female_height_cm / 100
female_bmi = female_weight_kg / (female_height_m ** 2)

female = np.column_stack((female, female_bmi))
print("Updated female matrix shape:", female.shape)
print("First 5 rows of the updated female matrix:\n", female[:5, :])

"""# ## 7. Standardize the Female Dataset

# A new column representing the BMI has been successfully added to the `female`
# matrix. The shape of the matrix has increased from (number of females, 7) to
# (number of females, 8). The first few rows of the updated matrix are printed
# to show the newly added BMI values in the eighth column.

# This section standardizes each column of the `female` matrix by computing
# the z-scores. The z-score of a data point is calculated as (x - mean) / standard deviation.
# This results in a new matrix `zfemale` where each column has a mean of 0 and a
# standard deviation of 1.
"""

zfemale = np.zeros_like(female, dtype=float)
for i in range(female.shape[1]):
    mean_val = np.mean(female[:, i])
    std_val = np.std(female[:, i])
    if std_val != 0:
        zfemale[:, i] = (female[:, i] - mean_val) / std_val
    else:
        zfemale[:, i] = 0  # Handle cases with zero standard deviation

print("Shape of the standardized female matrix (zfemale):", zfemale.shape)
print("First 5 rows of the standardized female matrix (zfemale):\n", zfemale[:5, :])
print("Mean of each column in zfemale:", np.mean(zfemale, axis=0).round(10))
print("Standard deviation of each column in zfemale:", np.std(zfemale, axis=0).round(10))

"""# The `zfemale` matrix now contains the standardized values of the original
# female body measurements and BMI. As expected, the mean of each column in
# `zfemale` is very close to 0, and the standard deviation of each column is very
# close to 1. Standardization is a useful technique for comparing variables with
# different units and scales.

# ## 8. Scatterplot Matrix and Correlation Coefficients for Standardized Female Data

# This section generates a scatterplot matrix (pairplot) for the standardized
# versions of height, weight, waist circumference, hip circumference, and BMI
# of the females. It also computes Pearson's and Spearman's correlation
# coefficients for all pairs of these variables.
"""

import pandas as pd
import seaborn as sns
from scipy.stats import pearsonr, spearmanr

zfemale_df = pd.DataFrame(zfemale, columns=['weight', 'height', 'upper_arm_length',
                                           'upper_leg_length', 'arm_circumference',
                                           'hip_circumference', 'waist_circumference', 'bmi'])

# Select the columns of interest for the pairplot and correlation analysis
selected_zfemale = zfemale_df[['height', 'weight', 'waist_circumference', 'hip_circumference', 'bmi']]

# Generate the scatterplot matrix
sns.pairplot(selected_zfemale)
plt.suptitle('Scatterplot Matrix of Standardized Female Measurements', y=1.02)
plt.show()

# Compute Pearson's and Spearman's correlation coefficients
print("\nPearson's Correlation Coefficients:")
for col1 in selected_zfemale.columns:
    for col2 in selected_zfemale.columns:
        if col1 != col2:
            corr, _ = pearsonr(selected_zfemale[col1], selected_zfemale[col2])
            print(f"Pearson({col1}, {col2}): {corr:.3f}")

print("\nSpearman's Rank Correlation Coefficients:")
for col1 in selected_zfemale.columns:
    for col2 in selected_zfemale.columns:
        if col1 != col2:
            corr, _ = spearmanr(selected_zfemale[col1], selected_zfemale[col2])
            print(f"Spearman({col1}, {col2}): {corr:.3f}")

"""# The scatterplot matrix displays the pairwise relationships between the
# standardized height, weight, waist circumference, hip circumference, and BMI
# for the female participants. Each off-diagonal subplot shows a scatter plot of
# one variable against another, while the diagonal plots typically show the
# distribution of each variable (here, the default kernel density estimate).
#
# The Pearson's correlation coefficients measure the linear relationship between
# pairs of variables, while Spearman's rank correlation coefficients measure the
# monotonic relationship (whether one variable tends to increase as the other
# increases, not necessarily linearly).
#
# From the results, we can observe strong positive correlations between weight,
# waist circumference, hip circumference, and BMI, as expected. Height shows a
# weaker positive correlation with these variables. The high correlations suggest
# that individuals with higher values in one of these measures tend to have higher
# values in the others. The Spearman correlations are generally similar to the
# Pearson correlations, indicating that the relationships are largely monotonic.

# ## 9. Compute Waist-to-Height Ratio and Waist-to-Hip Ratio

# This section calculates the waist circumference to height ratio (WHR) and the
# waist circumference to hip circumference ratio (WHR) for both male and female
# participants and adds these as two new columns to their respective matrices.
"""

# For males
male_waist_circumference_cm = male[:, 6]
male_height_cm = male[:, 1]
male_hip_circumference_cm = male[:, 5]

male_whr = male_waist_circumference_cm / male_height_cm
male_whpr = male_waist_circumference_cm / male_hip_circumference_cm

male = np.column_stack((male, male_whr, male_whpr))
print("Updated male matrix shape:", male.shape)
print("First 5 rows of the updated male matrix:\n", male[:5, :])

# For females
female_waist_circumference_cm = female[:, 6]
female_height_cm = female[:, 1]
female_hip_circumference_cm = female[:, 5]

female_whr = female_waist_circumference_cm / female_height_cm
female_whpr = female_waist_circumference_cm / female_hip_circumference_cm

female = np.column_stack((female, female_whr, female_whpr))
print("Updated female matrix shape:", female.shape)
print("First 5 rows of the updated female matrix:\n", female[:5, :])

"""# Two new columns, representing the waist-to-height ratio and the waist-to-hip
# ratio, have been added to both the male and female matrices. The shapes
# of the matrices have increased by two in the column dimension. The first few
# rows of the updated matrices are printed to show the newly added ratio values.

# ## 10. Box-and-Whisker Plot of Waist-to-Height and Waist-to-Hip Ratios

# This section creates a box-and-whisker plot to compare the distributions of
# the waist-to-height ratio and the waist-to-hip ratio between male and female
# participants.

# Check the actual column names in the dataset
"""

print("Female columns:", female_df.columns.tolist())
print("Male columns:", male_df.columns.tolist())